#!/bin/bash
# Build the site.

previewLength=2
. config

function getDocs
{
    cd src/site
    find . -iname '*.md'
    cd ..
}

function getOutName
{
    local name="$1"
    
    if [ "$(basename "$name")" == 'README.md' ]; then
        echo "$(dirname "$name")/index.html"
    else
        echo "$name" | sed 's/md$/html/g'
    fi
}

function assertDir
{
    local name="$(dirname "$1")"
    
    if [ "$name" != '/' ]; then
        mkdir -p "$name"
    fi
}

function getDocAttribute
{
    local fileName="$1"
    local attribute="$2"
    
    data="$(grep "<!-- $attribute: " "$fileName" | sed 's/^.*<!-- //g;s/ -->$//g' | cut -d\  -f2-)"
    
    if [ "$data" != '' ]; then
        echo "$data"
    else
        echo "Didn't get any value for document attribute '$attribute' in $fileName." >&2
    fi
}

function prepDocs
{
    cd build
    rm -Rf intermediate
    mkdir -p ../intermediate/{rss,html,suggested,tags,tagCombos,preview,list} rss
    while read -r fileIn; do
        _buildDoc "$fileIn" "Prep" &
    done
    wait
}

function _buildDoc
{
    local fileIn="$1"
    local stage="$2"
    
    # Prep
    assertDir "$fileIn"
    fileOut="$(getOutName "$fileIn")"
    echo "$stage $fileOut."
    
    # Get the document attributes.
    srcFile="../src/site/$fileIn"
    myTag="$(getDocAttribute "$srcFile" 'MYTAG')"
    public="$(getDocAttribute "$srcFile" 'PUBLIC')"
    releaseDate="$(getDocAttribute "$srcFile" 'RELEASEDATE')"
    tags="$(getDocAttribute "$srcFile" 'TAGS')"
    tighterTags="$(echo "$tags" | sed 's/, /,/g')"
    uniqueTags="$(getUniqueTags "$tighterTags")"
    title="$(getDocAttribute "$srcFile" 'TITLE')"
    titleImage="$(getDocAttribute "$srcFile" 'TITLEIMAGE')"
    
    case "$stage" in
        "Prep")
            # Build intermediate stuff.
            addDocToTags "$myTag" "$releaseDate" "$uniqueTags,sitemap"
            saveTagCombo "$uniqueTags"
            buildPreview "$srcFile" "../intermediate/preview/$myTag"
            # TODO Build HTML item.
            # TODO Build RSS item.
        ;;
        "Build")
            # Build the doc.
            cat ../src/templates/head.html > "$fileOut"
            #echo "s#~!TITLE!~#$title#g;s#TAGS#$tags#g"
            cat "$srcFile" | insertYoutube | pandoc -f markdown -t html >> "$fileOut"
            sed -i "s#~!TITLE!~#$title#g;s#~!TITLEIMAGE!~#$titleImage#g;s#~!TAGS!~#$tags#g" "$fileOut"
            cat ../src/templates/foot.html >> "$fileOut"
        ;;
    esac
}

function buildDocs
{
    cd build
    while read -r fileIn; do
        _buildDoc "$fileIn" "Build" &
    done
    wait
}

function buildItem
{
    true
}

function addDocToTags
{
    local doc="$1"
    local date="$2"
    local tags="$3"
    
    IFS=","
    
    for tag in $tags; do
        addDocToTag "$doc" "$date" $tag
    done
    
    IFS=" "
}

function addDocToTag
{
    # This is assumed to be  run from inside addDocToTags, inside buildDocs. Therefore the it will be executed inside the ./build directory, so all paths are relative to that.
    local tagPath="../intermediate/tags"
    
    local doc="$1"
    local date="$2"
    local tag="$3"
    
    if [ "$doc" == '' ] || [ "$date" == '' ] || [ "$tag" == '' ] ; then
        echo "Could not add doc '$doc' to tag '$tag' on date '$date'." >&2
        return 1
    else
        echo "$date $doc" >> "$tagPath/$tag.raw"
    fi
}

function sortTags
{
    cd  intermediate/tags
    
    echo -n "Sorting tags..."
    for tag in *.raw;do
        sort -u "$tag" > "$tag.sorted"
        shortTag="$(echo "$tag" | sed 's/\.raw$//g')"
        mv "$tag.sorted" "$shortTag"
        rm "$tag"
    done
    echo "Done."
    
    cd ../.. # TODO Is this really needed?
}

function getUniqueTags
{
    local tags="$1"
    echo "$tags" | sed 's/,/\n/g' | sort -u | grep -v '^$' | tr '\n' ',' | sed 's/,$//g'
}

function saveTagCombo
{
    # Assumed to be called within the prep. So inside the ./build directory.
    local tagCombo="$1"
    touch "../intermediate/tagCombos/$tagCombo"
}

function fillTagCombos
{
    # Assumed to be called from the script root. So not inside any sub-directory.
    cd intermediate/tagCombos
    
    for tagCombo in *; do
        IFS=','
        echo "Fill tagCombo $tagCombo."
        for tag in $tagCombo; do
            cat "../tags/$tag"
        done | sort -u > "$tagCombo"
        IFS=' '
    done
    
    cd ~-
}

function buildPreview
{
    local inFile="$1"
    local outFile="$2"
    
    value="$(grep -v '\(^<!-- \|^$\|^#\|^!\|^\[\|^----\|^====\|^\\\\\|^.$\|^http\)' "$inFile" | head -n "$previewLength")"
    
    echo $value > "$outFile"
}

function insertYoutube
{
    while read -r line; do
        if [ "${line::29}" == "https://www.youtube.com/watch" ]; then
            id="$(echo "$line" | sed 's/^.*v=//g;s/&.*$//g')"
            echo '<iframe width="560" height="315" src="https://www.youtube.com/embed/'"$id"'" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'
        else
            echo "$line"
        fi
    done
}

function copyAssets
{
    for asset in img js css; do
        if [ -e "src/site/$asset" ]; then
            echo "Copying $asset."
            rsync -r "src/site/$asset" build/ &
        else
            echo "Skipping $asset."
        fi
    done
}

function findSubAssets
{
    cd src/site
    find | grep -v '\(/$\|.md$\)' | cut -b3-
}

function copySubAssets
{
    cd build
    while read fileIn; do
        mkdir -p "$(dirname "$fileIn")"
        if [ ! -d "../src/site/$fileIn" ]; then
            cp "../src/site/$fileIn" "$fileIn"
        fi
    done
}

mkdir -p build
copyAssets
findSubAssets | copySubAssets &
getDocs | prepDocs
sortTags
fillTagCombos
# TODO Build tags.
# getLists intermediate/tags | buildList rss .rss build/rss 10
# getLists intermediate/tags | buildList html .html intermediate/list 100000

# TODO Build tagCombos.
# getLists intermediate/tagCombos | buildList html .html intermediate/list 100000

# TODO Resize thumbnails.
getDocs | buildDocs

# TODO Do lowercase symlinks.
