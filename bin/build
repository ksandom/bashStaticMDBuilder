#!/bin/bash
# Build the site.

previewLength=40
. config

function getDocs
{
    cd src/site
    find . -iname '*.md'
    cd .. # TODO Is this really needed?
}

function getOutName
{
    local name="$1"
    
    if [ "$(basename "$name")" == 'README.md' ]; then
        echo "$(dirname "$name")/index.html"
    else
        echo "$name" | sed 's/md$/html/g'
    fi
}

function assertDir
{
    local name="$(dirname "$1")"
    
    if [ "$name" != '/' ]; then
        mkdir -p "$name"
    fi
}

function getDocAttribute
{
    local fileName="$1"
    local attribute="$2"
    
    data="$(grep "<!-- $attribute: " "$fileName" | sed 's/^.*<!-- //g;s/ -->$//g' | cut -d\  -f2-)"
    
    if [ "$data" != '' ]; then
        echo "$data"
    else
        echo "Didn't get any value for document attribute '$attribute' in $fileName." >&2
    fi
}

function prepDocs
{
    rm -Rf ../intermediate
    cd build
    mkdir -p ../intermediate/{rss,html,suggested,tags,tagCombos,preview,list,feed,tagBar/tags,tagBar/bars} rss
    while read -r fileIn; do
        _buildDoc "$fileIn" "Prep" &
    done
    wait
}

function _buildDoc
{
    local fileIn="$1"
    local stage="$2"
    
    # Prep
    assertDir "$fileIn"
    fileOut="$(getOutName "$fileIn")"
    echo "$stage doc $fileOut."
    
    # Get the document attributes.
    srcFile="../src/site/$fileIn"
    myTag="$(getDocAttribute "$srcFile" 'MYTAG')"
    public="$(getDocAttribute "$srcFile" 'PUBLIC')"
    releaseDate="$(getDocAttribute "$srcFile" 'RELEASEDATE')"
    tags="$(getDocAttribute "$srcFile" 'TAGS')"
    tighterTags="$(echo "$tags" | sed 's/, /,/g')"
    uniqueTags="$(getUniqueTags "$tighterTags")"
    title="$(getDocAttribute "$srcFile" 'TITLE')"
    titleImage="$(getDocAttribute "$srcFile" 'TITLEIMAGE')"
    titleImageThumbnail="$(getImageName "$titleImage" "_thumb")"
    
    case "$stage" in
        "Prep")
            # Build intermediate stuff.
            addDocToTags "$myTag" "$releaseDate" "$uniqueTags,$myTag,all,sitemap"
            # TODO Add create a stub for each tag and make this doc a member of it.
            saveTagCombo "$uniqueTags"
            buildPreview "$srcFile" "../intermediate/preview/$myTag"
            buildItem "$myTag" "html" "$uniqueTags" "$titleImageThumbnail"
            buildItem "$myTag" "rss" "$uniqueTags"
            makeThumbnail "../src/site/$myTag/$titleImage" "$myTag/$titleImageThumbnail"
        ;;
        "Build")
            # Build the doc.
            cat ../src/templates/head.html > "$fileOut"
            #echo "s#~!TITLE!~#$title#g;s#TAGS#$tags#g"
            cat "$srcFile" | insertYoutube | pandoc -f markdown -t html >> "$fileOut"
            sed -i "s#~!TITLE!~#$title#g;s#~!TITLEIMAGE!~#$titleImage#g;s#~!TAGS!~#$tags#g" "$fileOut"
            # TODO Create a wrapper for these.
            echo "<DIV CLASS=\"recommendedItems\">" >> "$fileOut"
            echo "<DIV CLASS=\"myTags\">" >> "$fileOut"
            getTagBar "$uniqueTags" "html" >> "$fileOut"
            echo "</DIV>" >> "$fileOut"
            cat "../intermediate/list/$uniqueTags" >> "$fileOut"
            echo "</DIV>" >> "$fileOut"
            cat ../src/templates/foot.html >> "$fileOut"
        ;;
    esac
}

function buildDocs
{
    cd build
    while read -r fileIn; do
        _buildDoc "$fileIn" "Build" &
    done
    wait
}

function buildItem
{
    # This is assumed to be run within prep/build so will be in the ./build directory.
    local tag="$1"
    local type="$2"
    local tags="$3"
    local thumbnail="$4"
    local itemFileOut="../intermediate/$type/$tag"
    local tagBar="$(getTagBar "$uniqueTags" "html")"
    
    cat "../src/templates/item.$type" | \
        sed "s#~!TITLE!~#$title#g; s#~!CONTENT!~#$(cat "../intermediate/preview/$tag")#g; s#~!RELEASEDATE!~#$releaseDate#g; s#~!SITEURL!~#$siteURL#g; s#~!MYTAG!~#$tag#g; s#~!THUMBNAIL!~#$thumbnail#g" \
        > "$itemFileOut"
    
    replaceLine "$itemFileOut" '~!ITEMTAGS!~' "$tagBar"
}

function replaceLine
{
    local fileName="$1"
    local search="$2"
    local replace="$3"
    
    rm -f "$fileName.replace"
    touch "$fileName.replace"
    while read -r line; do
        if [ "$line" != "$search" ]; then
            echo "$line" >> "$fileName.replace"
        else
            echo "$replace" >> "$fileName.replace"
        fi
    done < <(cat "$fileName")
    
    rm "$fileName"
    mv "$fileName.replace" "$fileName"
}

function getImageName
{
    local inputName="$1"
    local suffix="$2"
    
    local extension="$(echo "$inputName" | sed 's/^.*\.//g')"
    local name="$(echo "$inputName" | sed "s/\.$extension$//g")"
    
    echo "$name$suffix.$extension"
}

function makeThumbnail
{
    local inFile="$1"
    local outFile="$2"
    
    if [ ! -f "$outFile" ]; then
        convert -resize "$thumbnailSize" "$inFile" "$outFile"
    fi
}

function buildRSSFeeds
{
    while read -r feed; do
        _buildRSSFeed "$feed" &
    done
    wait
}

function _buildRSSFeed
{
    local feedName="$1"
    local fileName="build/rss/$feedName.rss"
    echo "Build feed $feedName."
    
    cat "src/templates/head.rss" \
        > "$fileName"
    
    cat "intermediate/feed/$feedName" >> "$fileName"
    
    cat "src/templates/foot.rss" \
        >> "$fileName"
}

function getTagBar
{
    local tags="$1"
    local type="$2"
    local tagBarFile="../intermediate/tagBar/bars/$tags.$type"
    
    buildTagBar "$tags" "$type"
    cat "$tagBarFile"
}

function buildTagBar
{
    local tags="$1"
    local type="$2"
    local tagBarFile="../intermediate/tagBar/bars/$tags.$type"
    
    if [ ! -f "$tagBarFile" ]; then
        tagsContents="$(_buildTags "$tags" "$type" | _buildTagsGetContents)"
        # echo "DEBUG $tagsContents" >&2
        
        cat "../src/templates/tagBar.$type" | \
            sed "s#~!TAGS!~#$tagsContents#g" \
            > "$tagBarFile"
    fi
}

function _buildTagsGetContents
{
    while read -r fileIn; do
        cat "$fileIn"
    done | tr '\n' ',' | sed 's/,//g' # TODO This is a terrible hack to get rid of \n.
}

function _buildTags
{
    local tags="$1"
    local type="$2"
    
    # TODO Do this better. Eg it won't handle tags with spaces (which shouldn't happen anyway...). Check if IFS will work here.
    for tag in $(echo $tags | sed 's/,/ /g'); do
        tagFileName="../intermediate/tagBar/tags/$tag.$type"
        buildTag "$tag" "$type" "$tagFileName"
        echo "$tagFileName"
    done
}

function buildTag
{
    local tag="$1"
    local type="$2"
    local tagFileName="$3"
    
    cat "../src/templates/tag.$type" | \
        sed "s#~!TAG!~#$tag#g" \
        > "$tagFileName"
    
}

function addDocToTags
{
    local doc="$1"
    local date="$2"
    local tags="$3"
    
    IFS=","
    
    for tag in $tags; do
        addDocToTag "$doc" "$date" $tag
    done
    
    IFS=" "
}

function addDocToTag
{
    # This is assumed to be  run from inside addDocToTags, inside buildDocs. Therefore the it will be executed inside the ./build directory, so all paths are relative to that.
    local tagPath="../intermediate/tags"
    
    local doc="$1"
    local date="$2"
    local tag="$3"
    
    if [ "$doc" == '' ] || [ "$date" == '' ] || [ "$tag" == '' ] ; then
        echo "Could not add doc '$doc' to tag '$tag' on date '$date'." >&2
        return 1
    else
        echo "$date $doc" >> "$tagPath/$tag.raw"
    fi
}

function sortTags
{
    cd  intermediate/tags
    
    echo -n "Sorting tags..."
    for tag in *.raw;do
        sort -ur "$tag" > "$tag.sorted"
        shortTag="$(echo "$tag" | sed 's/\.raw$//g')"
        mv "$tag.sorted" "$shortTag"
        rm "$tag"
    done
    echo "Done."
    
    cd ../.. # TODO Is this really needed?
}

function getUniqueTags
{
    local tags="$1"
    echo "$tags" | sed 's/,/\n/g' | sort -u | grep -v '^$' | tr '\n' ',' | sed 's/,$//g'
}

function saveTagCombo
{
    # Assumed to be called within the prep. So inside the ./build directory.
    local tagCombo="$1"
    touch "../intermediate/tagCombos/$tagCombo"
}

function fillTagCombos
{
    # Assumed to be called from the script root. So not inside any sub-directory.
    cd intermediate/tagCombos
    
    for tagCombo in *; do
        echo "Fill tagCombo $tagCombo."
        for tag in $(echo $tagCombo | sed 's/,/\n/g'); do
            cat "../tags/$tag"
            echo "  $tag" >&2
            cat "../tags/$tag" >&2
        done | sort -ru > "$tagCombo"
    done
    
    cd ~-
}

function buildPreview
{
    local inFile="$1"
    local outFile="$2"
    
    value="$(grep -v '\(^<!-- \|^$\|^#\|^!\|^\[\|^----\|^====\|^\\\\\|^.$\|^http\)' "$inFile"| tr ' ' '\n' | head -n "$previewLength" | tr '\n' ' ')"
    
    echo "$value" > "$outFile"
}

function insertYoutube
{
    while read -r line; do
        if [ "${line::29}" == "https://www.youtube.com/watch" ] || [ "${line::28}" == "http://www.youtube.com/watch" ]; then
            id="$(echo "$line" | sed 's/^.*v=//g;s/&.*$//g')"
            echo '<iframe class="video" width="560" height="315" src="https://www.youtube.com/embed/'"$id"'" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'
        else
            echo "$line"
        fi
    done
}

function getLists
{
    local listsLocation="$1"
    cd "$listsLocation"
    ls -1
    cd ~-
}

function buildList
{
    # This is intended to be run from the script root. So no sub directories.
    #rss build/rss 10
    local listOrigin="$1"
    local type="$2"
    local destination="$3"
    local limit="$4"
    
    while read -r feed; do
        _buildList "$feed" &
    done
    wait
}

function _buildList
{
    local feed="$1"
    
    echo "Build feed contents $feed."
    filePath="$destination/$feed"
    rm -f "$filePath"
    while read -r releaseDate item; do
        cat intermediate/$type/$item >> "$filePath"
    done < <(cat "$listOrigin/$feed")
}

function deriveLatest
{
    head -n "$howManyPostsOnRoot" intermediate/tags/all > intermediate/tags/latest
}

function copyAssets
{
    for asset in img js css; do
        if [ -e "src/site/$asset" ]; then
            echo "Copying $asset."
            rsync -r "src/site/$asset" build/ &
        else
            echo "Skipping $asset."
        fi
    done
}

function findSubAssets
{
    cd src/site
    find | grep -v '\(/$\|.md$\)' | cut -b3-
}

function copySubAssets
{
    cd build
    while read fileIn; do
        mkdir -p "$(dirname "$fileIn")"
        if [ ! -d "../src/site/$fileIn" ]; then
            cp "../src/site/$fileIn" "$fileIn"
        fi
    done
}

function findSymlinks
{
    cd src/site
    find . -type l | cut -b3-
    cd .. # TODO Is this really needed?
}

function copySymlinks
{
    cd build
    echo "Copying symlinks."
    while read -r symlink; do
        subDir="$(dirname "$symlink")"
        if [ "$subDir" != '.' ]; then
            mkdir -p "$subDir"
        fi
        cp -Pv "../src/site/$symlink" "$symlink"
    done
}

mkdir -p build
copyAssets
findSubAssets | copySubAssets &
getDocs | prepDocs
sortTags
deriveLatest
fillTagCombos
getLists intermediate/tags | buildList intermediate/tags rss intermediate/feed 10
getLists intermediate/tags | buildList intermediate/tags html intermediate/list 100000
getLists intermediate/tagCombos | buildList intermediate/tagCombos html intermediate/list 100000
getLists intermediate/tags | buildRSSFeeds
getDocs | buildDocs
findSymlinks | copySymlinks

# TODO Do lowercase symlinks.
# TODO Honour build date.
# TODO Add test flag.
# TODO Add testcss/js.
# TODO Mark test both ways.
# TODO Don't upload when marked as test.
# TODO Make tags clickable.
# TODO Vimeo.
